@startuml
skinparam component {
  FontSize 14
  BackgroundColor #ADD8E6
  BorderColor #4682B4
  StereotypeBackgroundColor #F0FFF0
  StereotypeFontColor #191970
}

skinparam interface {
  FontSize 11
  BackgroundColor #90EE90
  BorderColor #3CB371
}

skinparam package {
  BackgroundColor #FFFFE0
  BorderColor #DAA520
}

' The first component we have is the frontend
package "1. Frontend" {
  component "Frontend" as frontend {
    ' The frontend has a responsibility to show the User Interface as well as to handle the user input
    interface "User Interface" as ui
    interface "User Input Manager" as input
  }
}

' The second component we have is the backend
package "2. Backend" {
  component "Backend" as backend {
    ' The backend has the responsibility of authentication, database management, location management
    package "Logic Management" {
      component "Logic Management" as logic {
        interface Main as main
        interface create_new_user as create_new_user
        interface create_new_bus as create_new_bus
        interface GetBusUsageByBus as GetBusUsageByBus
        interface create_new_driver as create_new_driver
        interface create_new_route as create_new_route
        interface create_new_schedule as create_new_schedule
        interface create_new_booking as create_new_booking
        interface cancel_booking as cancel_booking
        interface verify_new_booking as verify_new_booking
        interface create_new_boarding as create_new_boarding
        interface GetLiveLocation as GetLiveLocation
        interface GenerateTicket as GenerateTicket
        interface VerifyTicket as VerifyTicket
        interface GetUserBusUsage as GetUserBusUsage
        interface UpdateLiveLocation as UpdateLiveLocation
      }
    }
    component "Authentication Manager" as auth {
      interface "Authenticate User" as authUser
    }
    package "Database Manager" {
      component "Database Manager" as db {
        interface "Database Engine" as dbengine
        component "Passenger Table" as passenger
        component "Authorities Table" as authorities
        component "Driver Table" as driver
        component "Bookings Table" as bookings
        component "Boarding Table" as boarding
        component "Tickets Table" as tickets
        component "Penalty Table" as penalty
        component "Feedback Table" as feedback
        component "Bus Table" as bus
        component "Route Table" as route
        component "Schedule Table" as schedule
        component "LiveLocation Table" as liveLocation
      }
    }
    component "Location Manager" as loc {
    }
  }
}

' The third component we have is the database
package "3. Database" {
  component "Database" as database {
    ' The database has the responsibility of storing the data
    interface "Data Storage" as storage
  }
}

' The fourth component we have is the external services
package "4. External Services" {
  component "External Services" as external {
    ' The external services have the responsibility of handling the external services, namely the LocationAPI
    interface "Location API" as locationAPI
  }
}

' Now we will connect the components
' Adding the tables





' Now we will connect the components
frontend --> ui : "User Input"
ui --> input : "User Input"
input --> authUser : "Authentication"
authUser --> main : "After User Authentication"
locationAPI --> loc : "Location API"


' LOGIC MANAGEMENT


' Connecting the interfaces to the logic manager
main --> create_new_user : "Create New User"
main --> create_new_bus : "Create New Bus"
GetUserBusUsage --> main : "Get User Bus Usage"
main --> create_new_driver : "Create New Driver"
main --> create_new_route : "Create New Route"
main --> create_new_schedule : "Create New Schedule"
main --> create_new_booking : "Create New Booking"
main --> cancel_booking : "Cancel Booking"
main --> verify_new_booking : "Verify New Booking"
main --> create_new_boarding : "Create New Boarding"
GetLiveLocation --> main : "Get Live Location"
main --> GenerateTicket : "Generate Ticket"
main --> VerifyTicket : "Verify Ticket"
main --> UpdateLiveLocation : "Update Live Location"
GetBusUsageByBus --> main : "Get Bus Usage By Bus"

' Now we will connect the interfaces to the other end
create_new_user --> dbengine
create_new_bus --> dbengine
create_new_driver --> dbengine
create_new_route --> dbengine
create_new_schedule --> dbengine
create_new_booking --> dbengine
cancel_booking --> dbengine
verify_new_booking --> dbengine
create_new_boarding --> dbengine
dbengine --> GetLiveLocation
UpdateLiveLocation --> dbengine
dbengine --> GenerateTicket
VerifyTicket --> dbengine
dbengine --> GetUserBusUsage
dbengine --> GetBusUsageByBus
loc --> main

' Connecting the interfaces to the database manager
dbengine -- passenger : "Passenger Table"
dbengine -- authorities : "Authorities Table"
dbengine -- driver : "Driver Table"
dbengine -- bookings : "Bookings Table"
dbengine -- boarding : "Boarding Table"
dbengine -- tickets : "Tickets Table"
dbengine -- penalty : "Penalty Table"
dbengine -- feedback : "Feedback Table"
dbengine -- bus : "Bus Table"
dbengine -- route : "Route Table"
dbengine -- schedule : "Schedule Table"
dbengine -- liveLocation : "LiveLocation Table"



' Now we will connect the components to the database
db -down- storage : "Data Storage"
@enduml
